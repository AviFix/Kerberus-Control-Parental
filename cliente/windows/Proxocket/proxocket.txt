########################################################################

Title:  Proxocket
Author: Luigi Auriemma
e-mail: aluigi@autistici.org
web:    aluigi.org

########################################################################

1) Introduction
2) Capturing the packets
3) Custom handling/modification of the packets
4) How it works and advantages/disadvantages

########################################################################

===============
1) Introduction
===============

Proxocket is a dll proxy project for the main Winsock functions which
allows to capture any type of packet and data sent/received by a
specific software of your choice and optionally modifying its content
through a custom dll easy to develop.

Proxocket handles the following functions for both ws2_32.dll and
wsock32.dll: WSAStartup, socket, WSASocketA, WSASocketW, closesocket,
connect, WSAConnect, bind, accept, WSAAccept, recv, recvfrom, WSARecv,
WSARecvFrom, WSARecvEx, send, sendto, WSASend, WSASendTo.

Note that the handling of the WSARecv* and WSASend* functions is still
experimental and overlapping is not supported.


########################################################################

========================
2) Capturing the packets
========================

Get the WS2_32.DLL (WSOCK32.DLL is usually not needed) file located in
the Proxocket package and copy it in the folder of the software you want
to monitor.

When you will start that program will be generated a
program_proxocket_DATE.cap file which will contain all the packets sent
and received by the main program.
This CAP file is in tcpdump format so you can use any sniffer to open
and read it, like Wireshark: http://www.wireshark.org

Proxocket is able to handle and dump any TCP, UDP, ICMP, IGMP and RAW
packet with automatic handling of the SOCK_STREAM, SOCK_DGRAM and
SOCK_RAW type in both sending and receiving.

Notes, problems and solutions
-----------------------------
It has been reported that on Vista the dll proxying could not work
properly, in that case "seems" possible to override the problem by
setting the following registry key to 1 with regedit:
  HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\Image File Execution Options\DevOverrideEnable

If the program you want to monitor crashes when started, remove the
Proxocket WSOCK32.DLL file from its folder (in case you copied it
before) leaving only WS2_32.DLL and it should work.
An example of programs that don't accept these files together are
Firefox, Filezilla and Pidgin.

If you have doubts if the program you want to monitor uses ws2_32 or
wsock32 simply open it with a hex editor or search one of these two
strings in the executable... or more simply if the CAP file is not
generated with the Proxocket WS2_32.DLL remove it and place WSOCK32.DLL.

If the CAP file is not generated in any case means that the program uses
a direct link to the original file located in the Windows directory or
other advanced solutions... very rare cases.

Update: seems that some recent operating systems or recent versions of
some programs are avoiding the loading of libraries like ws2_32.dll from
the same folder of the program so in these cases there is not much to do
unfortunately.


########################################################################

==============================================
3) Custom handling/modification of the packets
==============================================

Proxocket has also an additional feature, it can be used for modifying
and/or handling the sending and receiving of the data and even the
incoming and outgoing connections.

This feature is customly made by the user who must get the
src/myproxocket.c code (and src/proxocket_defines.h too which contains
some needed variables and defines in it), modifying it where he wants
and he needs or rewriting it from scratch using my one only as quick
reference and example, recompiling it as MYPROXOCKET.DLL and placing it
in the folder of the program to hook with the other WS2_32.DLL or
WSOCK32.DLL files.

So, for example, if we want that all the incoming UDP packets to be
composed only by 'A' chars, it's enough to place a memset(buf,'A',len);
in the myrecvfrom function.
Or if we want we can create a custom MYPROXOCKET.DLL which is able to
decrypt or decompress in real time a specific protocol (for example for
Ventrilo or the compression of some Doom ports and so on for anything
else).

Read the commented header of myproxocket.c for ALL the informations
required to modify and use it correctly, the comments and examples
contained there are everything is needed to start with the programming
of this useful component of Proxocket.

When the Proxocket dlls (ws2_32/wsock32) find MYPROXOCKET.DLL in the
same folder all the functions in this dll will be automatically loaded
and used when required, so if you need to hook only the recvfrom
function you can delete all the mysocket, myconnect, mybind, myaccept
and other functions that you don't use.

When the myproxocket feature is enabled the capturing function will be
automatically disabled, so will be created no CAP files.

NOTE that all the functions in myproxocket must be declared as __cdecl.


########################################################################

============================================
4) How it works and advantages/disadvantages
============================================

The idea of Proxocket is the one of the dll proxies, so it's
constituited by a ws2_32.dll and wsock32.dll which are used between the
main program and the real ws2_32.dll and wsock32.dll files:

  program <-> Proxocket's ws2_32.dll <-> real ws2_32.dll

This is possible because the dlls used by the programs are first
searched in their current folder and if these dlls are not found will be
searched in c:\windows\system32 and so on.

So if Firefox is in c:\programs\Firefox and you start firefox.exe or one
of its links it will get the ws2_32.dll located in c:\programs\Firefox
and then will switch to the other system paths if the file is not found.

The advantages of this method are that it's not needed to hook the
functions with a dll hooker/injector at loading/runtime, everything is
transparent for the main program allowing to proxify also programs that
use anti-debugging techniques or particular executables, works also on
localhost, differently to a sniffer the generated CAP file is exactly
in the order and with the packets as they have been generated/received,
and the myproxocket.dll feature allows anyone to have full control over
the data in real-time (so it's possible to create other derived projects
like minimalistic firewalls or socket patches for specific bugged
programs/games and so on, without losing performances).

The only disadvantage I can see happens if the program to monitor/modify
prevents the usage of dlls from its same folder but this is very rare.

Note: when using the main monitoring feature of Proxocket (the dumping
of the packets in the tcpdump file) sometimes with multi-threaded
programs could happen an incorrect generation of the CAP file, anyway
it's a rare event.

The tool initializes itself (capturing and myproxocket mode) when
WSAStartup is called by the main program.

The base of this project has been created through my "DLL proxy skeleton
generator":

  http://aluigi.org/mytoolz.htm#dllproxyskel


########################################################################
